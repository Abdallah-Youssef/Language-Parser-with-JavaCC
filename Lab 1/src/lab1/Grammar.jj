PARSER_BEGIN(Grammar)
package egtry.lab1;

import java.io.StringReader;

public class Grammar {
  
    public static void main(String[] args) throws Exception {
      StringReader in=new StringReader("count 10");
      Grammar hello=new Grammar(in);
      hello.start();
    }
    
}

PARSER_END(Grammar)



SKIP: { " " |"\t" |"\n" |"\r" }

TOKEN: { <Digit: ["0"-"9"] >  }
TOKEN: { <Letter: ["a"-"f"] > }
TOKEN: { < Bool: "ff" | "tt" > }
TOKEN: { < Op: "(" > }
TOKEN: { < Cl: ")" > }
TOKEN: { < Add: "+" > }
TOKEN: { < Min: "-" > }
TOKEN: { < Eq: "==" > }
TOKEN: { < Not: "!" > }
TOKEN: { < And: "^" > }

void Num():
{}
{
  < Digit > ( Num() )*
}

void Var():
{}
{
  < Letter > (Var())*
}

void AExp():
{}
{
  Num() | Var() | < Op> AExp() < Add> AExp() <Cl > | < Op> AExp() < Min > AExp() <Cl >
}

void BExp():
{}
{
	< Bool > | < Op> AExp() < Eq > AExp() <Cl > | < Not > BExp() | < Op> BExp() < And > BExp() <Cl >
}

/*void Com():
{}
{	  Var() ":=" AExp() | Com() ";" Com() | "if" BExp() "then" Com() "else" Com()| "while" BExp() "do" Com()
}*/

void start():
{
}
{
  ( AExp() | BExp())*
  <EOF>
 
}


/*


Digit   → 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
Letter → a | b | c | d | e | f
Num   → Digit Num  |  ε
Var     →  Letter Var  |  ε
AExp  →  Num | Var | (AExp + AExp) | (AExp −AExp)
BExp  →  tt | ff | (AExp == AExp) | ! BExp | (BExp ^ BExp)
Com   →  skip | Var := AExp | Com; Com | if BExp then Com else Com | while BExp do Com


*/